% Provided variables
a1 = 0.8; a2 = 0.3;
pA = [0 2];
pB = [3 0];

% Compute the robot end-effector position between point pA to point pB 
% using Cartesian interpolation in 50 steps over 10 seconds.
P = mtraj(@tpoly, pA, pB, 50)

% For each position along the end-effector trajectory determine the 
% corresponding joint angles using inverse kinematics. Store the joint 1
% values in column 1 and the joint 2 values in column 2 of the variable qtraj.
%qtraj =

for i = 1:1:50
   inKin = inverseKinematics(P(i,1),P(i,2),a1,a2);
   qtraj(i,1) = inKin(1,1);
   qtraj(i,2) = inKin(1,2);    %unit should be m not cm?
end

disp(qtraj)

% If you have correctly computed the joint trajectories, you can visualise these with
figure; plot(linspace(0,10,50),qtraj)
xlabel('t'); ylabel('q'); grid on

% Using the forward kinematic equations compute the end-effector position for 
% every point along the joint trajectory you just computed. Store the x values
% of the end-effector's trajectory in the vector x and the y values in the vector y.
for i = 1:1:50
    q1 = qtraj(i,1);
    q2 = qtraj(i,2);
    E = trchain2('R(q1) Ty(a1) Tx(q2) Ty(a2)', [q1 q2]);
    x(i) = E(1,3);
    y(i) = E(2,3);
end


% If you have correctly computed the end-effector trajectory, you can visualise it using
figure; plot(x, y)
xlabel('x'); ylabel('y'); grid on





function ik = inverseKinematics(x,y,a1,a2)
%Function returns [q1,q2] for this specific robot

%First calculates the two possible sets of inverse kinematics for the given joint position
q2 = sqrt((x^2)+(y^2)-(121/100));
a = q2;
b = -1.1;
c = x;
q1 = atan2(c,sqrt((a*a)+(b*b)-(c*c))) - atan2(a,b);

%Use forward kinematics to see if this value of q1 is correct.
E = trchain2('R(q1) Ty(a1) Tx(q2) Ty(a2)', [q1 q2]);
xFound = E(1,3);
yFound = E(2,3);

if abs(x-xFound) > 0.01 || abs(y-yFound) > 0.01
    %Cant just check x==xFound... annoying
    %Value of q1 was incorrect so it must be the other one
    a = 1.1;
    b = q2;
    c = y;
    q1 = atan2(c,sqrt((a*a)+(b*b)-(c*c))) - atan2(a,b);
end

q = [q1, q2];
ik = q;
end